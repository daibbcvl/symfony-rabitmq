<?php

namespace App\Controller\BackEnd;

use App\Entity\Comment;
use App\Entity\Post;
use App\Form\Type\CommentApprovalType;
use App\Repository\CommentRepository;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;


/**
 * @Route("/admin/comments")
 */
class CommentController extends AbstractController
{
    /**
     * @Route("", name="comment_index", methods={"GET"})
     *
     * @param Request           $request
     * @param CommentRepository $repository
     * @return Response
     */
    public function index(Request $request, CommentRepository $repository): Response
    {
        $criteria = [];
        $page = $request->get('page', 1);
        $size = $request->get('size', 20);
        $sort = $request->get('sort', ['name' => 'asc']);
        $pager = $repository->search($criteria, $sort)->setMaxPerPage($size)->setCurrentPage($page);

        return $this->render('backend/comment/index.html.twig', [
            'pager' => $pager,
        ]);
    }


    /**
     * @Route("/{id<\d+>}", name="comment_edit", methods={"GET", "PUT"})
     *
     * @param Request                $request
     * @param Comment                $comment
     * @param EntityManagerInterface $entityManager
     *
     * @param LoggerInterface        $logger
     * @return Response
     * @throws \Exception
     */
    public function edit(Request $request, Comment $comment, EntityManagerInterface $entityManager, LoggerInterface $logger): Response
    {
        $form = $this->createForm(CommentApprovalType::class, $comment, ['method' => 'PUT']);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $comment->setApprover($this->getUser());
            $comment->setApprovedAt(new \DateTimeImmutable());
            $entityManager->flush();
            $this->addFlash('success', 'Comment status has been update to: '. $comment->getApproved());

            if ($url = $request->get('redirect_url')) {
                return $this->redirect($url);
            }
        }

        return $this->render('backend/comment/edit.html.twig', [
            'form' => $form->createView(),
            'comment' => $comment
        ]);
    }

    /**
     * @Route("/{id<\d+>}", name="post_delete", methods={"DELETE"})
     *
     * @param Post                   $post
     * @param EntityManagerInterface $entityManager
     *
     * @return Response
     */
    public function delete(Post $post, EntityManagerInterface $entityManager): Response
    {
        $post->setDeleted(true);
        $entityManager->flush();
        $this->addFlash('success', 'Delete post successfully.');

        return $this->redirectToRoute('post_index');
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
